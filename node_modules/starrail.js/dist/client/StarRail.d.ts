import CachedAssetsManager, { LanguageCode } from "./CachedAssetsManager";
import CharacterData from "../models/character/CharacterData";
import { ImageBaseUrl } from "../models/assets/ImageAssets";
import LightConeData from "../models/light_cone/LightConeData";
import RelicData from "../models/relic/RelicData";
import User from "../models/User";
/** @typedef */
export interface ClientOptions {
    userAgent: string;
    cacheDirectory: string | null;
    showFetchCacheLog: boolean;
    timeout: number;
    defaultLanguage: LanguageCode;
    imageBaseUrls: ImageBaseUrl[];
}
/**
 * @en StarRail
 */
declare class StarRail {
    /** The options the client was instantiated with */
    readonly options: ClientOptions;
    /**  */
    readonly cachedAssetsManager: CachedAssetsManager;
    /**
     * @param options
     */
    constructor(options: Partial<ClientOptions>);
    /**
     * @param uid
     */
    fetchUser(uid: number | string): Promise<User>;
    /**
     * @param playableOnly
     * @returns all character data
     */
    getAllCharacters(playableOnly?: boolean): CharacterData[];
    /**
     * @param excludeTestLightCones
     * @returns all light cone data
     */
    getAllLightCones(excludeTestLightCones?: boolean): LightConeData[];
    /**
     * @returns all relic data
     */
    getAllRelics(): RelicData[];
}
export default StarRail;
