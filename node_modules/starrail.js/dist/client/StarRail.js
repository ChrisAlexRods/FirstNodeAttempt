"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const config_file_js_1 = require("config_file.js");
const CachedAssetsManager_1 = __importDefault(require("./CachedAssetsManager"));
const CharacterData_1 = __importDefault(require("../models/character/CharacterData"));
const LightConeData_1 = __importDefault(require("../models/light_cone/LightConeData"));
const RelicData_1 = __importDefault(require("../models/relic/RelicData"));
const axios_utils_1 = require("../utils/axios_utils");
const RequestError_1 = __importDefault(require("../errors/RequestError"));
const User_1 = __importDefault(require("../models/User"));
const defaultImageBaseUrls = [];
/**
 * @en StarRail
 */
class StarRail {
    /**
     * @param options
     */
    constructor(options) {
        this.options = (0, config_file_js_1.bindOptions)({
            userAgent: "Mozilla/5.0",
            cacheDirectory: null,
            showFetchCacheLog: true,
            timeout: 3000,
            defaultLanguage: "en",
            imageBaseUrls: [...defaultImageBaseUrls],
        }, options);
        this.cachedAssetsManager = new CachedAssetsManager_1.default(this);
    }
    /**
     * @param uid
     */
    async fetchUser(uid) {
        if (isNaN(Number(uid)))
            throw new Error("Parameter `uid` must be a number or a string number.");
        const baseUrl = "https://api.mihomo.me/sr_info";
        const url = `${baseUrl}/${uid}`;
        const response = await (0, axios_utils_1.fetchJSON)(url, this, true);
        if (response.status !== 200) {
            throw new RequestError_1.default(`Request failed with unknown status code ${response.status} - ${response.statusText}\nRequest url: ${url}`, response.status, response.statusText);
        }
        return new User_1.default(Object.assign({}, response.data), this);
    }
    /**
     * @param playableOnly
     * @returns all character data
     */
    getAllCharacters(playableOnly = true) {
        return new config_file_js_1.JsonReader(this.cachedAssetsManager.getStarRailCacheData("AvatarConfig")).filterObject((_, c) => (playableOnly && c.getAsNumber("AdventurePlayerID") === c.getAsNumber("AvatarID")) || !playableOnly).map(([, c]) => new CharacterData_1.default(c.getAsNumber("AvatarID"), this));
    }
    /**
     * @param excludeTestLightCones
     * @returns all light cone data
     */
    getAllLightCones(excludeTestLightCones = true) {
        return new config_file_js_1.JsonReader(this.cachedAssetsManager.getStarRailCacheData("EquipmentConfig")).filterObject((_, lc) => (excludeTestLightCones && lc.has("AvatarBaseType")) || !excludeTestLightCones).map(([, lc]) => new LightConeData_1.default(lc.getAsNumber("EquipmentID"), this));
    }
    /**
     * @returns all relic data
     */
    getAllRelics() {
        return new config_file_js_1.JsonReader(this.cachedAssetsManager.getStarRailCacheData("RelicConfig")).mapObject((_, relic) => new RelicData_1.default(relic.getAsNumber("ID"), this));
    }
}
exports.default = StarRail;
