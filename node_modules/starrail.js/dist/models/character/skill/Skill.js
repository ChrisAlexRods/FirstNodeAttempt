"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const config_file_js_1 = require("config_file.js");
const TextAssets_1 = __importDefault(require("../../assets/TextAssets"));
const AssetsNotFoundError_1 = __importDefault(require("../../../errors/AssetsNotFoundError"));
const LeveledSkill_1 = __importDefault(require("./LeveledSkill"));
const ImageAssets_1 = __importDefault(require("../../assets/ImageAssets"));
const CombatType_1 = __importDefault(require("../../CombatType"));
/**
 * @en Skill
 */
class Skill {
    /**
     * @param id
     * @param client
     */
    constructor(id, client) {
        this.id = id;
        this.client = client;
        const _data = client.cachedAssetsManager.getStarRailCacheData("AvatarSkillConfig")[this.id];
        if (!_data)
            throw new AssetsNotFoundError_1.default("Skill", this.id);
        this._data = Object.values(_data);
        const json = new config_file_js_1.JsonReader(this._data[0]);
        this.name = new TextAssets_1.default(json.getAsNumber("SkillName", "Hash"), this.client);
        this.tag = new TextAssets_1.default(json.getAsNumber("SkillTag", "Hash"), this.client);
        this.skillTypeDescription = new TextAssets_1.default(json.getAsNumber("SkillTypeDesc", "Hash"), this.client);
        this.attackType = json.getAsStringWithDefault(null, "AttackType");
        const combatTypeId = json.getAsStringWithDefault(undefined, "StanceDamageType");
        this.combatType = combatTypeId ? new CombatType_1.default(combatTypeId, this.client) : null;
        this.effectType = json.getAsString("SkillEffect");
        this.maxLevel = json.getAsNumber("MaxLevel");
        this.skillIcon = new ImageAssets_1.default(json.getAsString("SkillIcon"), this.client);
        this.ultraSkillIcon = new ImageAssets_1.default(json.getAsString("UltraSkillIcon"), this.client);
    }
    /**
     * @param level
     */
    getSkillByLevel(level) {
        return new LeveledSkill_1.default(this._data[level - 1], this.client);
    }
}
exports.default = Skill;
