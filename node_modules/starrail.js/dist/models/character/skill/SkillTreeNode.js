"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const config_file_js_1 = require("config_file.js");
const AssetsNotFoundError_1 = __importDefault(require("../../../errors/AssetsNotFoundError"));
const LeveledSkillTreeNode_1 = __importDefault(require("./LeveledSkillTreeNode"));
const Skill_1 = __importDefault(require("./Skill"));
const TextAssets_1 = __importDefault(require("../../assets/TextAssets"));
const hash_utils_1 = require("../../../utils/hash_utils");
const ImageAssets_1 = __importDefault(require("../../assets/ImageAssets"));
/**
 * @en SkillTreeNode
 */
class SkillTreeNode {
    /**
     * @param id
     * @param client
     */
    constructor(id, client) {
        var _a;
        this.id = id;
        this.client = client;
        const _data = client.cachedAssetsManager.getStarRailCacheData("AvatarSkillTreeConfig")[this.id];
        if (!_data)
            throw new AssetsNotFoundError_1.default("SkillTreeNode", this.id);
        this._data = Object.values(_data);
        const json = new config_file_js_1.JsonReader(this._data[0]);
        this.maxLevel = json.getAsNumber("MaxLevel");
        this.isUnlockedByDefault = json.getAsBooleanWithDefault(false, "DefaultUnlock");
        this.levelUpSkills = json.get("LevelUpSkillID").mapArray((_, skillId) => new Skill_1.default(skillId.getAsNumber(), this.client));
        if (this.levelUpSkills.length === 0 && json.getAsString("PointName") === "")
            throw new Error(`SkillTreeNode must have a name.\nID: ${this.id}, Level: ${(_a = this["level"]) !== null && _a !== void 0 ? _a : 1}\nIf you encounter this error, please create an issue at https://github.com/yuko1101/starrail.js/issues`);
        this.name = this.levelUpSkills.length > 0 ? this.levelUpSkills[0].name : new TextAssets_1.default((0, hash_utils_1.getStableHash)(json.getAsString("PointName")), this.client);
        this.icon = new ImageAssets_1.default(json.getAsString("IconPath"), this.client);
    }
    /**
     * @param level
     */
    getSkillTreeNodeByLevel(level) {
        return new LeveledSkillTreeNode_1.default(this._data[level - 1], this.client);
    }
}
exports.default = SkillTreeNode;
