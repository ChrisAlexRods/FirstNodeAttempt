"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const config_file_js_1 = require("config_file.js");
const CharacterData_1 = __importDefault(require("./character/CharacterData"));
const ImageAssets_1 = __importDefault(require("./assets/ImageAssets"));
const AssetsNotFoundError_1 = __importDefault(require("../errors/AssetsNotFoundError"));
const Character_1 = __importDefault(require("./character/Character"));
/**
 * @en User
 */
class User {
    /**
     * @param data
     * @param client
     */
    constructor(data, client) {
        this.client = client;
        this._data = data;
        // TODO: error handling (e.g. user does not exist)
        const json = new config_file_js_1.JsonReader(this._data);
        const playerDetailInfo = json.get("PlayerDetailInfo");
        this.uid = playerDetailInfo.getAsNumber("UID");
        this.nickname = playerDetailInfo.getAsString("NickName");
        this.signature = playerDetailInfo.getAsStringWithDefault(null, "Signature");
        const birthday = playerDetailInfo.getAsNumberWithDefault(null, "Birthday");
        this.birthday = birthday ? { month: Math.floor(birthday / 100), day: birthday % 100 } : null;
        // head icon ids can be found in PlayerIcon.json, ItemPlayerCard.json, AvatarPlayerIcon.json, or ItemConfigAvatarPlayerIcon.json
        const headIconId = playerDetailInfo.getAsNumber("HeadIconID");
        let headIcon = this.client.cachedAssetsManager.getStarRailCacheData("AvatarPlayerIcon")[headIconId];
        const isCharacterHeadIcon = !!headIcon;
        if (!headIcon) {
            const otherHeadIcon = this.client.cachedAssetsManager.getStarRailCacheData("PlayerIcon")[headIconId];
            if (!otherHeadIcon)
                throw new AssetsNotFoundError_1.default("HeadIcon", headIconId);
            headIcon = otherHeadIcon;
        }
        const headIconJson = new config_file_js_1.JsonReader(headIcon);
        this.icon = new ImageAssets_1.default(headIconJson.getAsString("ImagePath"), this.client);
        this.iconCharacter = isCharacterHeadIcon ? new CharacterData_1.default(headIconJson.getAsNumber("AvatarID"), this.client) : null;
        this.level = playerDetailInfo.getAsNumber("Level");
        this.equilibriumLevel = playerDetailInfo.getAsNumberWithDefault(0, "WorldLevel");
        this.friends = playerDetailInfo.getAsNumberWithDefault(0, "CurFriendCount");
        const playerSpaceInfo = playerDetailInfo.get("PlayerSpaceInfo");
        this.achievements = playerSpaceInfo.getAsNumberWithDefault(0, "AchievementCount");
        this.characterCount = playerSpaceInfo.getAsNumber("AvatarCount");
        this.lightConeCount = playerSpaceInfo.getAsNumberWithDefault(0, "LightConeCount");
        this.forgottenHall = playerSpaceInfo.getAsNumberWithDefault(0, "ChallengeData", "PreMazeGroupIndex");
        this.simulatedUniverse = playerSpaceInfo.getAsNumberWithDefault(0, "PassAreaProgress");
        this.supportCharacter = new Character_1.default(playerDetailInfo.getAsJsonObject("AssistAvatar"), this.client);
        this.starfaringCompanions = playerDetailInfo.getAsJsonArrayWithDefault([], "DisplayAvatarList").map(c => new Character_1.default(c, this.client));
    }
}
exports.default = User;
